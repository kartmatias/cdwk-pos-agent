// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/kartmatias/cdwk-pos-agent/dao/model"
)

func newGrupo(db *gorm.DB, opts ...gen.DOOption) grupo {
	_grupo := grupo{}

	_grupo.grupoDo.UseDB(db, opts...)
	_grupo.grupoDo.UseModel(&model.Grupo{})

	tableName := _grupo.grupoDo.TableName()
	_grupo.ALL = field.NewAsterisk(tableName)
	_grupo.Codigo = field.NewInt64(tableName, "Codigo")
	_grupo.Descricao = field.NewString(tableName, "Descricao")
	_grupo.Und = field.NewString(tableName, "Und")
	_grupo.Valor = field.NewField(tableName, "Valor")
	_grupo.Almox = field.NewBool(tableName, "Almox")
	_grupo.DPA = field.NewBool(tableName, "DPA")
	_grupo.EstoqueMinimo = field.NewInt64(tableName, "EstoqueMinimo")
	_grupo.EstoqueMaximo = field.NewInt64(tableName, "EstoqueMaximo")
	_grupo.Servico = field.NewBool(tableName, "Servico")

	_grupo.fillFieldMap()

	return _grupo
}

type grupo struct {
	grupoDo grupoDo

	ALL           field.Asterisk
	Codigo        field.Int64
	Descricao     field.String
	Und           field.String
	Valor         field.Field
	Almox         field.Bool
	DPA           field.Bool
	EstoqueMinimo field.Int64
	EstoqueMaximo field.Int64
	Servico       field.Bool

	fieldMap map[string]field.Expr
}

func (g grupo) Table(newTableName string) *grupo {
	g.grupoDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g grupo) As(alias string) *grupo {
	g.grupoDo.DO = *(g.grupoDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *grupo) updateTableName(table string) *grupo {
	g.ALL = field.NewAsterisk(table)
	g.Codigo = field.NewInt64(table, "Codigo")
	g.Descricao = field.NewString(table, "Descricao")
	g.Und = field.NewString(table, "Und")
	g.Valor = field.NewField(table, "Valor")
	g.Almox = field.NewBool(table, "Almox")
	g.DPA = field.NewBool(table, "DPA")
	g.EstoqueMinimo = field.NewInt64(table, "EstoqueMinimo")
	g.EstoqueMaximo = field.NewInt64(table, "EstoqueMaximo")
	g.Servico = field.NewBool(table, "Servico")

	g.fillFieldMap()

	return g
}

func (g *grupo) WithContext(ctx context.Context) *grupoDo { return g.grupoDo.WithContext(ctx) }

func (g grupo) TableName() string { return g.grupoDo.TableName() }

func (g grupo) Alias() string { return g.grupoDo.Alias() }

func (g grupo) Columns(cols ...field.Expr) gen.Columns { return g.grupoDo.Columns(cols...) }

func (g *grupo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *grupo) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 9)
	g.fieldMap["Codigo"] = g.Codigo
	g.fieldMap["Descricao"] = g.Descricao
	g.fieldMap["Und"] = g.Und
	g.fieldMap["Valor"] = g.Valor
	g.fieldMap["Almox"] = g.Almox
	g.fieldMap["DPA"] = g.DPA
	g.fieldMap["EstoqueMinimo"] = g.EstoqueMinimo
	g.fieldMap["EstoqueMaximo"] = g.EstoqueMaximo
	g.fieldMap["Servico"] = g.Servico
}

func (g grupo) clone(db *gorm.DB) grupo {
	g.grupoDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g grupo) replaceDB(db *gorm.DB) grupo {
	g.grupoDo.ReplaceDB(db)
	return g
}

type grupoDo struct{ gen.DO }

func (g grupoDo) Debug() *grupoDo {
	return g.withDO(g.DO.Debug())
}

func (g grupoDo) WithContext(ctx context.Context) *grupoDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g grupoDo) ReadDB() *grupoDo {
	return g.Clauses(dbresolver.Read)
}

func (g grupoDo) WriteDB() *grupoDo {
	return g.Clauses(dbresolver.Write)
}

func (g grupoDo) Session(config *gorm.Session) *grupoDo {
	return g.withDO(g.DO.Session(config))
}

func (g grupoDo) Clauses(conds ...clause.Expression) *grupoDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g grupoDo) Returning(value interface{}, columns ...string) *grupoDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g grupoDo) Not(conds ...gen.Condition) *grupoDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g grupoDo) Or(conds ...gen.Condition) *grupoDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g grupoDo) Select(conds ...field.Expr) *grupoDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g grupoDo) Where(conds ...gen.Condition) *grupoDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g grupoDo) Order(conds ...field.Expr) *grupoDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g grupoDo) Distinct(cols ...field.Expr) *grupoDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g grupoDo) Omit(cols ...field.Expr) *grupoDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g grupoDo) Join(table schema.Tabler, on ...field.Expr) *grupoDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g grupoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *grupoDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g grupoDo) RightJoin(table schema.Tabler, on ...field.Expr) *grupoDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g grupoDo) Group(cols ...field.Expr) *grupoDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g grupoDo) Having(conds ...gen.Condition) *grupoDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g grupoDo) Limit(limit int) *grupoDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g grupoDo) Offset(offset int) *grupoDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g grupoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *grupoDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g grupoDo) Unscoped() *grupoDo {
	return g.withDO(g.DO.Unscoped())
}

func (g grupoDo) Create(values ...*model.Grupo) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g grupoDo) CreateInBatches(values []*model.Grupo, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g grupoDo) Save(values ...*model.Grupo) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g grupoDo) First() (*model.Grupo, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Grupo), nil
	}
}

func (g grupoDo) Take() (*model.Grupo, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Grupo), nil
	}
}

func (g grupoDo) Last() (*model.Grupo, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Grupo), nil
	}
}

func (g grupoDo) Find() ([]*model.Grupo, error) {
	result, err := g.DO.Find()
	return result.([]*model.Grupo), err
}

func (g grupoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Grupo, err error) {
	buf := make([]*model.Grupo, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g grupoDo) FindInBatches(result *[]*model.Grupo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g grupoDo) Attrs(attrs ...field.AssignExpr) *grupoDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g grupoDo) Assign(attrs ...field.AssignExpr) *grupoDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g grupoDo) Joins(fields ...field.RelationField) *grupoDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g grupoDo) Preload(fields ...field.RelationField) *grupoDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g grupoDo) FirstOrInit() (*model.Grupo, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Grupo), nil
	}
}

func (g grupoDo) FirstOrCreate() (*model.Grupo, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Grupo), nil
	}
}

func (g grupoDo) FindByPage(offset int, limit int) (result []*model.Grupo, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g grupoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g grupoDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g grupoDo) Delete(models ...*model.Grupo) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *grupoDo) withDO(do gen.Dao) *grupoDo {
	g.DO = *do.(*gen.DO)
	return g
}
