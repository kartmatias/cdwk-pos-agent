// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/kartmatias/cdwk-pos-agent/dao/model"
)

func newProduto(db *gorm.DB, opts ...gen.DOOption) produto {
	_produto := produto{}

	_produto.produtoDo.UseDB(db, opts...)
	_produto.produtoDo.UseModel(&model.Produto{})

	tableName := _produto.produtoDo.TableName()
	_produto.ALL = field.NewAsterisk(tableName)
	_produto.Referencia = field.NewString(tableName, "Referencia")
	_produto.Descricao = field.NewString(tableName, "Descricao")
	_produto.UND = field.NewString(tableName, "UND")
	_produto.Grade = field.NewString(tableName, "Grade")
	_produto.PrCompra = field.NewField(tableName, "PrCompra")
	_produto.PrCusto = field.NewField(tableName, "PrCusto")
	_produto.Preco1 = field.NewField(tableName, "Preco1")
	_produto.Preco2 = field.NewField(tableName, "Preco2")
	_produto.Preco3 = field.NewField(tableName, "Preco3")
	_produto.Preco4 = field.NewField(tableName, "Preco4")
	_produto.Preco5 = field.NewField(tableName, "Preco5")
	_produto.Preco6 = field.NewField(tableName, "Preco6")
	_produto.Colecao = field.NewInt64(tableName, "Colecao")
	_produto.Linha = field.NewInt64(tableName, "Linha")
	_produto.Grupo = field.NewInt64(tableName, "Grupo")
	_produto.CodigoBarras = field.NewString(tableName, "CodigoBarras")
	_produto.GradenaTabela = field.NewString(tableName, "GradenaTabela")
	_produto.Localizacao = field.NewString(tableName, "Localizacao")
	_produto.Pontuacao = field.NewFloat64(tableName, "Pontuacao")
	_produto.Composicao1 = field.NewString(tableName, "Composicao1")
	_produto.Composicao2 = field.NewString(tableName, "Composicao2")
	_produto.Composicao3 = field.NewString(tableName, "Composicao3")
	_produto.Inativo = field.NewBool(tableName, "Inativo")
	_produto.DataBalanco = field.NewTime(tableName, "DataBalanco")
	_produto.Entradas = field.NewInt64(tableName, "Entradas")
	_produto.Saidas = field.NewInt64(tableName, "Saidas")
	_produto.Fornecedor = field.NewInt64(tableName, "Fornecedor")
	_produto.CodigoOriginal = field.NewString(tableName, "CodigoOriginal")
	_produto.UltimaCompraFornecedor = field.NewInt64(tableName, "UltimaCompraFornecedor")
	_produto.UltimaCompraData = field.NewTime(tableName, "UltimaCompraData")
	_produto.PrFuncionario = field.NewField(tableName, "PrFuncionario")
	_produto.KitReferencia1 = field.NewString(tableName, "KitReferencia1")
	_produto.KitReferencia2 = field.NewString(tableName, "KitReferencia2")
	_produto.KitReferencia3 = field.NewString(tableName, "KitReferencia3")
	_produto.Tecido2 = field.NewString(tableName, "Tecido2")
	_produto.Tecido1 = field.NewString(tableName, "Tecido1")
	_produto.Composicao6 = field.NewString(tableName, "Composicao6")
	_produto.Composicao5 = field.NewString(tableName, "Composicao5")
	_produto.Composicao4 = field.NewString(tableName, "Composicao4")
	_produto.ExcluirdaTabeladePreco = field.NewBool(tableName, "ExcluirdaTabeladePreco")
	_produto.CoresdaTabela = field.NewString(tableName, "CoresdaTabela")
	_produto.PrLD = field.NewField(tableName, "PrLD")
	_produto.EntradasLD = field.NewInt64(tableName, "EntradasLD")
	_produto.SaidasLD = field.NewInt64(tableName, "SaidasLD")
	_produto.KitReferencia1TipoPeca = field.NewInt64(tableName, "KitReferencia1TipoPeca")
	_produto.KitReferencia2TipoPeca = field.NewInt64(tableName, "KitReferencia2TipoPeca")
	_produto.KitReferencia3TipoPeca = field.NewInt64(tableName, "KitReferencia3TipoPeca")
	_produto.KitReferencia4 = field.NewString(tableName, "KitReferencia4")
	_produto.KitReferencia4TipoPeca = field.NewInt64(tableName, "KitReferencia4TipoPeca")
	_produto.Simbologia = field.NewString(tableName, "Simbologia")
	_produto.SubGrupo = field.NewInt64(tableName, "SubGrupo")
	_produto.Genero = field.NewInt64(tableName, "Genero")
	_produto.Preco7 = field.NewField(tableName, "Preco7")
	_produto.DataBalancoLD = field.NewTime(tableName, "DataBalancoLD")
	_produto.MetaRepresentante = field.NewInt64(tableName, "MetaRepresentante")
	_produto.CodigoNCM = field.NewString(tableName, "CodigoNCM")
	_produto.DataCadastro = field.NewTime(tableName, "DataCadastro")
	_produto.AjustedePrecoTipo = field.NewString(tableName, "AjustedePreco_Tipo")
	_produto.AjustedePrecoData = field.NewTime(tableName, "AjustedePreco_Data")
	_produto.AjustedePrecoPercentual = field.NewFloat64(tableName, "AjustedePreco_Percentual")
	_produto.AjustedePrecoUsuario = field.NewString(tableName, "AjustedePreco_Usuario")
	_produto.AjustedePrecoHora = field.NewString(tableName, "AjustedePreco_Hora")
	_produto.Preco8 = field.NewField(tableName, "Preco8")
	_produto.Preco9 = field.NewField(tableName, "Preco9")
	_produto.Preco10 = field.NewField(tableName, "Preco10")
	_produto.Origem = field.NewInt64(tableName, "Origem")
	_produto.Peso = field.NewFloat64(tableName, "Peso")
	_produto.CodigoContabil = field.NewInt64(tableName, "CodigoContabil")
	_produto.Categoria = field.NewInt64(tableName, "Categoria")
	_produto.LocalizacaoPecaPiloto = field.NewString(tableName, "LocalizacaoPecaPiloto")
	_produto.PrMedio = field.NewField(tableName, "PrMedio")
	_produto.EntradaFinanceira = field.NewField(tableName, "EntradaFinanceira")
	_produto.SaidaFinanceira = field.NewField(tableName, "SaidaFinanceira")
	_produto.EstoqueMin = field.NewInt64(tableName, "EstoqueMin")
	_produto.EstoqueMax = field.NewInt64(tableName, "EstoqueMax")
	_produto.EstoqueMinimo = field.NewInt64(tableName, "EstoqueMinimo")
	_produto.SituacaoTributariaECF = field.NewString(tableName, "SituacaoTributariaECF")
	_produto.IndicadorProducaoPropriaTerceiro = field.NewString(tableName, "IndicadorProducaoPropriaTerceiro")
	_produto.IndicadorArredondamentoTruncamento = field.NewString(tableName, "IndicadorArredondamentoTruncamento")
	_produto.ReferenciaComercial = field.NewString(tableName, "ReferenciaComercial")
	_produto.GrupoSped = field.NewInt64(tableName, "GrupoSped")
	_produto.DigitoVerificador = field.NewInt64(tableName, "digitoVerificador")
	_produto.Tamanho = field.NewString(tableName, "tamanho")
	_produto.Preco11 = field.NewField(tableName, "Preco11")
	_produto.CodigoCEST = field.NewString(tableName, "CodigoCEST")
	_produto.IndicadorEscalaRelevante = field.NewString(tableName, "IndicadorEscalaRelevante")
	_produto.CNPJFabricante = field.NewString(tableName, "CNPJFabricante")
	_produto.CodigoBeneficioFiscalUF = field.NewString(tableName, "CodigoBeneficioFiscalUF")
	_produto.ImagemFrente = field.NewString(tableName, "ImagemFrente")
	_produto.ImagemVerso = field.NewString(tableName, "ImagemVerso")
	_produto.AtivoEcommerce = field.NewBool(tableName, "AtivoEcommerce")
	_produto.DataAlteracao = field.NewTime(tableName, "DataAlteracao")
	_produto.CSTPIS = field.NewString(tableName, "CST_PIS")
	_produto.AliquotaPIS = field.NewFloat64(tableName, "Aliquota_PIS")
	_produto.CSTCOFINS = field.NewString(tableName, "CST_COFINS")
	_produto.AliquotaCOFINS = field.NewFloat64(tableName, "Aliquota_COFINS")
	_produto.Detalhes = field.NewString(tableName, "Detalhes")
	_produto.CodigoICP = field.NewString(tableName, "CodigoICP")
	_produto.AtivoCatalogo = field.NewBool(tableName, "AtivoCatalogo")

	_produto.fillFieldMap()

	return _produto
}

type produto struct {
	produtoDo produtoDo

	ALL                                field.Asterisk
	Referencia                         field.String
	Descricao                          field.String
	UND                                field.String
	Grade                              field.String
	PrCompra                           field.Field
	PrCusto                            field.Field
	Preco1                             field.Field
	Preco2                             field.Field
	Preco3                             field.Field
	Preco4                             field.Field
	Preco5                             field.Field
	Preco6                             field.Field
	Colecao                            field.Int64
	Linha                              field.Int64
	Grupo                              field.Int64
	CodigoBarras                       field.String
	GradenaTabela                      field.String
	Localizacao                        field.String
	Pontuacao                          field.Float64
	Composicao1                        field.String
	Composicao2                        field.String
	Composicao3                        field.String
	Inativo                            field.Bool
	DataBalanco                        field.Time
	Entradas                           field.Int64
	Saidas                             field.Int64
	Fornecedor                         field.Int64
	CodigoOriginal                     field.String
	UltimaCompraFornecedor             field.Int64
	UltimaCompraData                   field.Time
	PrFuncionario                      field.Field
	KitReferencia1                     field.String
	KitReferencia2                     field.String
	KitReferencia3                     field.String
	Tecido2                            field.String
	Tecido1                            field.String
	Composicao6                        field.String
	Composicao5                        field.String
	Composicao4                        field.String
	ExcluirdaTabeladePreco             field.Bool
	CoresdaTabela                      field.String
	PrLD                               field.Field
	EntradasLD                         field.Int64
	SaidasLD                           field.Int64
	KitReferencia1TipoPeca             field.Int64
	KitReferencia2TipoPeca             field.Int64
	KitReferencia3TipoPeca             field.Int64
	KitReferencia4                     field.String
	KitReferencia4TipoPeca             field.Int64
	Simbologia                         field.String
	SubGrupo                           field.Int64
	Genero                             field.Int64
	Preco7                             field.Field
	DataBalancoLD                      field.Time
	MetaRepresentante                  field.Int64
	CodigoNCM                          field.String
	DataCadastro                       field.Time
	AjustedePrecoTipo                  field.String
	AjustedePrecoData                  field.Time
	AjustedePrecoPercentual            field.Float64
	AjustedePrecoUsuario               field.String
	AjustedePrecoHora                  field.String
	Preco8                             field.Field
	Preco9                             field.Field
	Preco10                            field.Field
	Origem                             field.Int64
	Peso                               field.Float64
	CodigoContabil                     field.Int64
	Categoria                          field.Int64
	LocalizacaoPecaPiloto              field.String
	PrMedio                            field.Field
	EntradaFinanceira                  field.Field
	SaidaFinanceira                    field.Field
	EstoqueMin                         field.Int64
	EstoqueMax                         field.Int64
	EstoqueMinimo                      field.Int64
	SituacaoTributariaECF              field.String
	IndicadorProducaoPropriaTerceiro   field.String
	IndicadorArredondamentoTruncamento field.String
	ReferenciaComercial                field.String
	GrupoSped                          field.Int64
	DigitoVerificador                  field.Int64
	Tamanho                            field.String
	Preco11                            field.Field
	CodigoCEST                         field.String
	IndicadorEscalaRelevante           field.String
	CNPJFabricante                     field.String
	CodigoBeneficioFiscalUF            field.String
	ImagemFrente                       field.String
	ImagemVerso                        field.String
	AtivoEcommerce                     field.Bool
	DataAlteracao                      field.Time
	CSTPIS                             field.String
	AliquotaPIS                        field.Float64
	CSTCOFINS                          field.String
	AliquotaCOFINS                     field.Float64
	Detalhes                           field.String
	CodigoICP                          field.String
	AtivoCatalogo                      field.Bool

	fieldMap map[string]field.Expr
}

func (p produto) Table(newTableName string) *produto {
	p.produtoDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p produto) As(alias string) *produto {
	p.produtoDo.DO = *(p.produtoDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *produto) updateTableName(table string) *produto {
	p.ALL = field.NewAsterisk(table)
	p.Referencia = field.NewString(table, "Referencia")
	p.Descricao = field.NewString(table, "Descricao")
	p.UND = field.NewString(table, "UND")
	p.Grade = field.NewString(table, "Grade")
	p.PrCompra = field.NewField(table, "PrCompra")
	p.PrCusto = field.NewField(table, "PrCusto")
	p.Preco1 = field.NewField(table, "Preco1")
	p.Preco2 = field.NewField(table, "Preco2")
	p.Preco3 = field.NewField(table, "Preco3")
	p.Preco4 = field.NewField(table, "Preco4")
	p.Preco5 = field.NewField(table, "Preco5")
	p.Preco6 = field.NewField(table, "Preco6")
	p.Colecao = field.NewInt64(table, "Colecao")
	p.Linha = field.NewInt64(table, "Linha")
	p.Grupo = field.NewInt64(table, "Grupo")
	p.CodigoBarras = field.NewString(table, "CodigoBarras")
	p.GradenaTabela = field.NewString(table, "GradenaTabela")
	p.Localizacao = field.NewString(table, "Localizacao")
	p.Pontuacao = field.NewFloat64(table, "Pontuacao")
	p.Composicao1 = field.NewString(table, "Composicao1")
	p.Composicao2 = field.NewString(table, "Composicao2")
	p.Composicao3 = field.NewString(table, "Composicao3")
	p.Inativo = field.NewBool(table, "Inativo")
	p.DataBalanco = field.NewTime(table, "DataBalanco")
	p.Entradas = field.NewInt64(table, "Entradas")
	p.Saidas = field.NewInt64(table, "Saidas")
	p.Fornecedor = field.NewInt64(table, "Fornecedor")
	p.CodigoOriginal = field.NewString(table, "CodigoOriginal")
	p.UltimaCompraFornecedor = field.NewInt64(table, "UltimaCompraFornecedor")
	p.UltimaCompraData = field.NewTime(table, "UltimaCompraData")
	p.PrFuncionario = field.NewField(table, "PrFuncionario")
	p.KitReferencia1 = field.NewString(table, "KitReferencia1")
	p.KitReferencia2 = field.NewString(table, "KitReferencia2")
	p.KitReferencia3 = field.NewString(table, "KitReferencia3")
	p.Tecido2 = field.NewString(table, "Tecido2")
	p.Tecido1 = field.NewString(table, "Tecido1")
	p.Composicao6 = field.NewString(table, "Composicao6")
	p.Composicao5 = field.NewString(table, "Composicao5")
	p.Composicao4 = field.NewString(table, "Composicao4")
	p.ExcluirdaTabeladePreco = field.NewBool(table, "ExcluirdaTabeladePreco")
	p.CoresdaTabela = field.NewString(table, "CoresdaTabela")
	p.PrLD = field.NewField(table, "PrLD")
	p.EntradasLD = field.NewInt64(table, "EntradasLD")
	p.SaidasLD = field.NewInt64(table, "SaidasLD")
	p.KitReferencia1TipoPeca = field.NewInt64(table, "KitReferencia1TipoPeca")
	p.KitReferencia2TipoPeca = field.NewInt64(table, "KitReferencia2TipoPeca")
	p.KitReferencia3TipoPeca = field.NewInt64(table, "KitReferencia3TipoPeca")
	p.KitReferencia4 = field.NewString(table, "KitReferencia4")
	p.KitReferencia4TipoPeca = field.NewInt64(table, "KitReferencia4TipoPeca")
	p.Simbologia = field.NewString(table, "Simbologia")
	p.SubGrupo = field.NewInt64(table, "SubGrupo")
	p.Genero = field.NewInt64(table, "Genero")
	p.Preco7 = field.NewField(table, "Preco7")
	p.DataBalancoLD = field.NewTime(table, "DataBalancoLD")
	p.MetaRepresentante = field.NewInt64(table, "MetaRepresentante")
	p.CodigoNCM = field.NewString(table, "CodigoNCM")
	p.DataCadastro = field.NewTime(table, "DataCadastro")
	p.AjustedePrecoTipo = field.NewString(table, "AjustedePreco_Tipo")
	p.AjustedePrecoData = field.NewTime(table, "AjustedePreco_Data")
	p.AjustedePrecoPercentual = field.NewFloat64(table, "AjustedePreco_Percentual")
	p.AjustedePrecoUsuario = field.NewString(table, "AjustedePreco_Usuario")
	p.AjustedePrecoHora = field.NewString(table, "AjustedePreco_Hora")
	p.Preco8 = field.NewField(table, "Preco8")
	p.Preco9 = field.NewField(table, "Preco9")
	p.Preco10 = field.NewField(table, "Preco10")
	p.Origem = field.NewInt64(table, "Origem")
	p.Peso = field.NewFloat64(table, "Peso")
	p.CodigoContabil = field.NewInt64(table, "CodigoContabil")
	p.Categoria = field.NewInt64(table, "Categoria")
	p.LocalizacaoPecaPiloto = field.NewString(table, "LocalizacaoPecaPiloto")
	p.PrMedio = field.NewField(table, "PrMedio")
	p.EntradaFinanceira = field.NewField(table, "EntradaFinanceira")
	p.SaidaFinanceira = field.NewField(table, "SaidaFinanceira")
	p.EstoqueMin = field.NewInt64(table, "EstoqueMin")
	p.EstoqueMax = field.NewInt64(table, "EstoqueMax")
	p.EstoqueMinimo = field.NewInt64(table, "EstoqueMinimo")
	p.SituacaoTributariaECF = field.NewString(table, "SituacaoTributariaECF")
	p.IndicadorProducaoPropriaTerceiro = field.NewString(table, "IndicadorProducaoPropriaTerceiro")
	p.IndicadorArredondamentoTruncamento = field.NewString(table, "IndicadorArredondamentoTruncamento")
	p.ReferenciaComercial = field.NewString(table, "ReferenciaComercial")
	p.GrupoSped = field.NewInt64(table, "GrupoSped")
	p.DigitoVerificador = field.NewInt64(table, "digitoVerificador")
	p.Tamanho = field.NewString(table, "tamanho")
	p.Preco11 = field.NewField(table, "Preco11")
	p.CodigoCEST = field.NewString(table, "CodigoCEST")
	p.IndicadorEscalaRelevante = field.NewString(table, "IndicadorEscalaRelevante")
	p.CNPJFabricante = field.NewString(table, "CNPJFabricante")
	p.CodigoBeneficioFiscalUF = field.NewString(table, "CodigoBeneficioFiscalUF")
	p.ImagemFrente = field.NewString(table, "ImagemFrente")
	p.ImagemVerso = field.NewString(table, "ImagemVerso")
	p.AtivoEcommerce = field.NewBool(table, "AtivoEcommerce")
	p.DataAlteracao = field.NewTime(table, "DataAlteracao")
	p.CSTPIS = field.NewString(table, "CST_PIS")
	p.AliquotaPIS = field.NewFloat64(table, "Aliquota_PIS")
	p.CSTCOFINS = field.NewString(table, "CST_COFINS")
	p.AliquotaCOFINS = field.NewFloat64(table, "Aliquota_COFINS")
	p.Detalhes = field.NewString(table, "Detalhes")
	p.CodigoICP = field.NewString(table, "CodigoICP")
	p.AtivoCatalogo = field.NewBool(table, "AtivoCatalogo")

	p.fillFieldMap()

	return p
}

func (p *produto) WithContext(ctx context.Context) *produtoDo { return p.produtoDo.WithContext(ctx) }

func (p produto) TableName() string { return p.produtoDo.TableName() }

func (p produto) Alias() string { return p.produtoDo.Alias() }

func (p produto) Columns(cols ...field.Expr) gen.Columns { return p.produtoDo.Columns(cols...) }

func (p *produto) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *produto) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 99)
	p.fieldMap["Referencia"] = p.Referencia
	p.fieldMap["Descricao"] = p.Descricao
	p.fieldMap["UND"] = p.UND
	p.fieldMap["Grade"] = p.Grade
	p.fieldMap["PrCompra"] = p.PrCompra
	p.fieldMap["PrCusto"] = p.PrCusto
	p.fieldMap["Preco1"] = p.Preco1
	p.fieldMap["Preco2"] = p.Preco2
	p.fieldMap["Preco3"] = p.Preco3
	p.fieldMap["Preco4"] = p.Preco4
	p.fieldMap["Preco5"] = p.Preco5
	p.fieldMap["Preco6"] = p.Preco6
	p.fieldMap["Colecao"] = p.Colecao
	p.fieldMap["Linha"] = p.Linha
	p.fieldMap["Grupo"] = p.Grupo
	p.fieldMap["CodigoBarras"] = p.CodigoBarras
	p.fieldMap["GradenaTabela"] = p.GradenaTabela
	p.fieldMap["Localizacao"] = p.Localizacao
	p.fieldMap["Pontuacao"] = p.Pontuacao
	p.fieldMap["Composicao1"] = p.Composicao1
	p.fieldMap["Composicao2"] = p.Composicao2
	p.fieldMap["Composicao3"] = p.Composicao3
	p.fieldMap["Inativo"] = p.Inativo
	p.fieldMap["DataBalanco"] = p.DataBalanco
	p.fieldMap["Entradas"] = p.Entradas
	p.fieldMap["Saidas"] = p.Saidas
	p.fieldMap["Fornecedor"] = p.Fornecedor
	p.fieldMap["CodigoOriginal"] = p.CodigoOriginal
	p.fieldMap["UltimaCompraFornecedor"] = p.UltimaCompraFornecedor
	p.fieldMap["UltimaCompraData"] = p.UltimaCompraData
	p.fieldMap["PrFuncionario"] = p.PrFuncionario
	p.fieldMap["KitReferencia1"] = p.KitReferencia1
	p.fieldMap["KitReferencia2"] = p.KitReferencia2
	p.fieldMap["KitReferencia3"] = p.KitReferencia3
	p.fieldMap["Tecido2"] = p.Tecido2
	p.fieldMap["Tecido1"] = p.Tecido1
	p.fieldMap["Composicao6"] = p.Composicao6
	p.fieldMap["Composicao5"] = p.Composicao5
	p.fieldMap["Composicao4"] = p.Composicao4
	p.fieldMap["ExcluirdaTabeladePreco"] = p.ExcluirdaTabeladePreco
	p.fieldMap["CoresdaTabela"] = p.CoresdaTabela
	p.fieldMap["PrLD"] = p.PrLD
	p.fieldMap["EntradasLD"] = p.EntradasLD
	p.fieldMap["SaidasLD"] = p.SaidasLD
	p.fieldMap["KitReferencia1TipoPeca"] = p.KitReferencia1TipoPeca
	p.fieldMap["KitReferencia2TipoPeca"] = p.KitReferencia2TipoPeca
	p.fieldMap["KitReferencia3TipoPeca"] = p.KitReferencia3TipoPeca
	p.fieldMap["KitReferencia4"] = p.KitReferencia4
	p.fieldMap["KitReferencia4TipoPeca"] = p.KitReferencia4TipoPeca
	p.fieldMap["Simbologia"] = p.Simbologia
	p.fieldMap["SubGrupo"] = p.SubGrupo
	p.fieldMap["Genero"] = p.Genero
	p.fieldMap["Preco7"] = p.Preco7
	p.fieldMap["DataBalancoLD"] = p.DataBalancoLD
	p.fieldMap["MetaRepresentante"] = p.MetaRepresentante
	p.fieldMap["CodigoNCM"] = p.CodigoNCM
	p.fieldMap["DataCadastro"] = p.DataCadastro
	p.fieldMap["AjustedePreco_Tipo"] = p.AjustedePrecoTipo
	p.fieldMap["AjustedePreco_Data"] = p.AjustedePrecoData
	p.fieldMap["AjustedePreco_Percentual"] = p.AjustedePrecoPercentual
	p.fieldMap["AjustedePreco_Usuario"] = p.AjustedePrecoUsuario
	p.fieldMap["AjustedePreco_Hora"] = p.AjustedePrecoHora
	p.fieldMap["Preco8"] = p.Preco8
	p.fieldMap["Preco9"] = p.Preco9
	p.fieldMap["Preco10"] = p.Preco10
	p.fieldMap["Origem"] = p.Origem
	p.fieldMap["Peso"] = p.Peso
	p.fieldMap["CodigoContabil"] = p.CodigoContabil
	p.fieldMap["Categoria"] = p.Categoria
	p.fieldMap["LocalizacaoPecaPiloto"] = p.LocalizacaoPecaPiloto
	p.fieldMap["PrMedio"] = p.PrMedio
	p.fieldMap["EntradaFinanceira"] = p.EntradaFinanceira
	p.fieldMap["SaidaFinanceira"] = p.SaidaFinanceira
	p.fieldMap["EstoqueMin"] = p.EstoqueMin
	p.fieldMap["EstoqueMax"] = p.EstoqueMax
	p.fieldMap["EstoqueMinimo"] = p.EstoqueMinimo
	p.fieldMap["SituacaoTributariaECF"] = p.SituacaoTributariaECF
	p.fieldMap["IndicadorProducaoPropriaTerceiro"] = p.IndicadorProducaoPropriaTerceiro
	p.fieldMap["IndicadorArredondamentoTruncamento"] = p.IndicadorArredondamentoTruncamento
	p.fieldMap["ReferenciaComercial"] = p.ReferenciaComercial
	p.fieldMap["GrupoSped"] = p.GrupoSped
	p.fieldMap["digitoVerificador"] = p.DigitoVerificador
	p.fieldMap["tamanho"] = p.Tamanho
	p.fieldMap["Preco11"] = p.Preco11
	p.fieldMap["CodigoCEST"] = p.CodigoCEST
	p.fieldMap["IndicadorEscalaRelevante"] = p.IndicadorEscalaRelevante
	p.fieldMap["CNPJFabricante"] = p.CNPJFabricante
	p.fieldMap["CodigoBeneficioFiscalUF"] = p.CodigoBeneficioFiscalUF
	p.fieldMap["ImagemFrente"] = p.ImagemFrente
	p.fieldMap["ImagemVerso"] = p.ImagemVerso
	p.fieldMap["AtivoEcommerce"] = p.AtivoEcommerce
	p.fieldMap["DataAlteracao"] = p.DataAlteracao
	p.fieldMap["CST_PIS"] = p.CSTPIS
	p.fieldMap["Aliquota_PIS"] = p.AliquotaPIS
	p.fieldMap["CST_COFINS"] = p.CSTCOFINS
	p.fieldMap["Aliquota_COFINS"] = p.AliquotaCOFINS
	p.fieldMap["Detalhes"] = p.Detalhes
	p.fieldMap["CodigoICP"] = p.CodigoICP
	p.fieldMap["AtivoCatalogo"] = p.AtivoCatalogo
}

func (p produto) clone(db *gorm.DB) produto {
	p.produtoDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p produto) replaceDB(db *gorm.DB) produto {
	p.produtoDo.ReplaceDB(db)
	return p
}

type produtoDo struct{ gen.DO }

func (p produtoDo) Debug() *produtoDo {
	return p.withDO(p.DO.Debug())
}

func (p produtoDo) WithContext(ctx context.Context) *produtoDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p produtoDo) ReadDB() *produtoDo {
	return p.Clauses(dbresolver.Read)
}

func (p produtoDo) WriteDB() *produtoDo {
	return p.Clauses(dbresolver.Write)
}

func (p produtoDo) Session(config *gorm.Session) *produtoDo {
	return p.withDO(p.DO.Session(config))
}

func (p produtoDo) Clauses(conds ...clause.Expression) *produtoDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p produtoDo) Returning(value interface{}, columns ...string) *produtoDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p produtoDo) Not(conds ...gen.Condition) *produtoDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p produtoDo) Or(conds ...gen.Condition) *produtoDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p produtoDo) Select(conds ...field.Expr) *produtoDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p produtoDo) Where(conds ...gen.Condition) *produtoDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p produtoDo) Order(conds ...field.Expr) *produtoDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p produtoDo) Distinct(cols ...field.Expr) *produtoDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p produtoDo) Omit(cols ...field.Expr) *produtoDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p produtoDo) Join(table schema.Tabler, on ...field.Expr) *produtoDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p produtoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *produtoDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p produtoDo) RightJoin(table schema.Tabler, on ...field.Expr) *produtoDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p produtoDo) Group(cols ...field.Expr) *produtoDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p produtoDo) Having(conds ...gen.Condition) *produtoDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p produtoDo) Limit(limit int) *produtoDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p produtoDo) Offset(offset int) *produtoDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p produtoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *produtoDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p produtoDo) Unscoped() *produtoDo {
	return p.withDO(p.DO.Unscoped())
}

func (p produtoDo) Create(values ...*model.Produto) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p produtoDo) CreateInBatches(values []*model.Produto, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p produtoDo) Save(values ...*model.Produto) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p produtoDo) First() (*model.Produto, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Produto), nil
	}
}

func (p produtoDo) Take() (*model.Produto, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Produto), nil
	}
}

func (p produtoDo) Last() (*model.Produto, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Produto), nil
	}
}

func (p produtoDo) Find() ([]*model.Produto, error) {
	result, err := p.DO.Find()
	return result.([]*model.Produto), err
}

func (p produtoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Produto, err error) {
	buf := make([]*model.Produto, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p produtoDo) FindInBatches(result *[]*model.Produto, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p produtoDo) Attrs(attrs ...field.AssignExpr) *produtoDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p produtoDo) Assign(attrs ...field.AssignExpr) *produtoDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p produtoDo) Joins(fields ...field.RelationField) *produtoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p produtoDo) Preload(fields ...field.RelationField) *produtoDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p produtoDo) FirstOrInit() (*model.Produto, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Produto), nil
	}
}

func (p produtoDo) FirstOrCreate() (*model.Produto, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Produto), nil
	}
}

func (p produtoDo) FindByPage(offset int, limit int) (result []*model.Produto, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p produtoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p produtoDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p produtoDo) Delete(models ...*model.Produto) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *produtoDo) withDO(do gen.Dao) *produtoDo {
	p.DO = *do.(*gen.DO)
	return p
}
