// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/kartmatias/cdwk-pos-agent/dao/model"
)

func newComandasItemGrade(db *gorm.DB, opts ...gen.DOOption) comandasItemGrade {
	_comandasItemGrade := comandasItemGrade{}

	_comandasItemGrade.comandasItemGradeDo.UseDB(db, opts...)
	_comandasItemGrade.comandasItemGradeDo.UseModel(&model.ComandasItemGrade{})

	tableName := _comandasItemGrade.comandasItemGradeDo.TableName()
	_comandasItemGrade.ALL = field.NewAsterisk(tableName)
	_comandasItemGrade.Comanda = field.NewInt64(tableName, "Comanda")
	_comandasItemGrade.Produto = field.NewString(tableName, "Produto")
	_comandasItemGrade.Cor = field.NewInt64(tableName, "Cor")
	_comandasItemGrade.Tam01 = field.NewInt64(tableName, "Tam01")
	_comandasItemGrade.Tam02 = field.NewInt64(tableName, "Tam02")
	_comandasItemGrade.Tam03 = field.NewInt64(tableName, "Tam03")
	_comandasItemGrade.Tam04 = field.NewInt64(tableName, "Tam04")
	_comandasItemGrade.Tam05 = field.NewInt64(tableName, "Tam05")
	_comandasItemGrade.Tam06 = field.NewInt64(tableName, "Tam06")
	_comandasItemGrade.Tam07 = field.NewInt64(tableName, "Tam07")
	_comandasItemGrade.Tam08 = field.NewInt64(tableName, "Tam08")
	_comandasItemGrade.Tam09 = field.NewInt64(tableName, "Tam09")
	_comandasItemGrade.Tam10 = field.NewInt64(tableName, "Tam10")

	_comandasItemGrade.fillFieldMap()

	return _comandasItemGrade
}

type comandasItemGrade struct {
	comandasItemGradeDo comandasItemGradeDo

	ALL     field.Asterisk
	Comanda field.Int64
	Produto field.String
	Cor     field.Int64
	Tam01   field.Int64
	Tam02   field.Int64
	Tam03   field.Int64
	Tam04   field.Int64
	Tam05   field.Int64
	Tam06   field.Int64
	Tam07   field.Int64
	Tam08   field.Int64
	Tam09   field.Int64
	Tam10   field.Int64

	fieldMap map[string]field.Expr
}

func (c comandasItemGrade) Table(newTableName string) *comandasItemGrade {
	c.comandasItemGradeDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c comandasItemGrade) As(alias string) *comandasItemGrade {
	c.comandasItemGradeDo.DO = *(c.comandasItemGradeDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *comandasItemGrade) updateTableName(table string) *comandasItemGrade {
	c.ALL = field.NewAsterisk(table)
	c.Comanda = field.NewInt64(table, "Comanda")
	c.Produto = field.NewString(table, "Produto")
	c.Cor = field.NewInt64(table, "Cor")
	c.Tam01 = field.NewInt64(table, "Tam01")
	c.Tam02 = field.NewInt64(table, "Tam02")
	c.Tam03 = field.NewInt64(table, "Tam03")
	c.Tam04 = field.NewInt64(table, "Tam04")
	c.Tam05 = field.NewInt64(table, "Tam05")
	c.Tam06 = field.NewInt64(table, "Tam06")
	c.Tam07 = field.NewInt64(table, "Tam07")
	c.Tam08 = field.NewInt64(table, "Tam08")
	c.Tam09 = field.NewInt64(table, "Tam09")
	c.Tam10 = field.NewInt64(table, "Tam10")

	c.fillFieldMap()

	return c
}

func (c *comandasItemGrade) WithContext(ctx context.Context) *comandasItemGradeDo {
	return c.comandasItemGradeDo.WithContext(ctx)
}

func (c comandasItemGrade) TableName() string { return c.comandasItemGradeDo.TableName() }

func (c comandasItemGrade) Alias() string { return c.comandasItemGradeDo.Alias() }

func (c comandasItemGrade) Columns(cols ...field.Expr) gen.Columns {
	return c.comandasItemGradeDo.Columns(cols...)
}

func (c *comandasItemGrade) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *comandasItemGrade) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 13)
	c.fieldMap["Comanda"] = c.Comanda
	c.fieldMap["Produto"] = c.Produto
	c.fieldMap["Cor"] = c.Cor
	c.fieldMap["Tam01"] = c.Tam01
	c.fieldMap["Tam02"] = c.Tam02
	c.fieldMap["Tam03"] = c.Tam03
	c.fieldMap["Tam04"] = c.Tam04
	c.fieldMap["Tam05"] = c.Tam05
	c.fieldMap["Tam06"] = c.Tam06
	c.fieldMap["Tam07"] = c.Tam07
	c.fieldMap["Tam08"] = c.Tam08
	c.fieldMap["Tam09"] = c.Tam09
	c.fieldMap["Tam10"] = c.Tam10
}

func (c comandasItemGrade) clone(db *gorm.DB) comandasItemGrade {
	c.comandasItemGradeDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c comandasItemGrade) replaceDB(db *gorm.DB) comandasItemGrade {
	c.comandasItemGradeDo.ReplaceDB(db)
	return c
}

type comandasItemGradeDo struct{ gen.DO }

func (c comandasItemGradeDo) Debug() *comandasItemGradeDo {
	return c.withDO(c.DO.Debug())
}

func (c comandasItemGradeDo) WithContext(ctx context.Context) *comandasItemGradeDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c comandasItemGradeDo) ReadDB() *comandasItemGradeDo {
	return c.Clauses(dbresolver.Read)
}

func (c comandasItemGradeDo) WriteDB() *comandasItemGradeDo {
	return c.Clauses(dbresolver.Write)
}

func (c comandasItemGradeDo) Session(config *gorm.Session) *comandasItemGradeDo {
	return c.withDO(c.DO.Session(config))
}

func (c comandasItemGradeDo) Clauses(conds ...clause.Expression) *comandasItemGradeDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c comandasItemGradeDo) Returning(value interface{}, columns ...string) *comandasItemGradeDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c comandasItemGradeDo) Not(conds ...gen.Condition) *comandasItemGradeDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c comandasItemGradeDo) Or(conds ...gen.Condition) *comandasItemGradeDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c comandasItemGradeDo) Select(conds ...field.Expr) *comandasItemGradeDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c comandasItemGradeDo) Where(conds ...gen.Condition) *comandasItemGradeDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c comandasItemGradeDo) Order(conds ...field.Expr) *comandasItemGradeDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c comandasItemGradeDo) Distinct(cols ...field.Expr) *comandasItemGradeDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c comandasItemGradeDo) Omit(cols ...field.Expr) *comandasItemGradeDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c comandasItemGradeDo) Join(table schema.Tabler, on ...field.Expr) *comandasItemGradeDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c comandasItemGradeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *comandasItemGradeDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c comandasItemGradeDo) RightJoin(table schema.Tabler, on ...field.Expr) *comandasItemGradeDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c comandasItemGradeDo) Group(cols ...field.Expr) *comandasItemGradeDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c comandasItemGradeDo) Having(conds ...gen.Condition) *comandasItemGradeDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c comandasItemGradeDo) Limit(limit int) *comandasItemGradeDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c comandasItemGradeDo) Offset(offset int) *comandasItemGradeDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c comandasItemGradeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *comandasItemGradeDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c comandasItemGradeDo) Unscoped() *comandasItemGradeDo {
	return c.withDO(c.DO.Unscoped())
}

func (c comandasItemGradeDo) Create(values ...*model.ComandasItemGrade) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c comandasItemGradeDo) CreateInBatches(values []*model.ComandasItemGrade, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c comandasItemGradeDo) Save(values ...*model.ComandasItemGrade) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c comandasItemGradeDo) First() (*model.ComandasItemGrade, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComandasItemGrade), nil
	}
}

func (c comandasItemGradeDo) Take() (*model.ComandasItemGrade, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComandasItemGrade), nil
	}
}

func (c comandasItemGradeDo) Last() (*model.ComandasItemGrade, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComandasItemGrade), nil
	}
}

func (c comandasItemGradeDo) Find() ([]*model.ComandasItemGrade, error) {
	result, err := c.DO.Find()
	return result.([]*model.ComandasItemGrade), err
}

func (c comandasItemGradeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ComandasItemGrade, err error) {
	buf := make([]*model.ComandasItemGrade, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c comandasItemGradeDo) FindInBatches(result *[]*model.ComandasItemGrade, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c comandasItemGradeDo) Attrs(attrs ...field.AssignExpr) *comandasItemGradeDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c comandasItemGradeDo) Assign(attrs ...field.AssignExpr) *comandasItemGradeDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c comandasItemGradeDo) Joins(fields ...field.RelationField) *comandasItemGradeDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c comandasItemGradeDo) Preload(fields ...field.RelationField) *comandasItemGradeDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c comandasItemGradeDo) FirstOrInit() (*model.ComandasItemGrade, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComandasItemGrade), nil
	}
}

func (c comandasItemGradeDo) FirstOrCreate() (*model.ComandasItemGrade, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComandasItemGrade), nil
	}
}

func (c comandasItemGradeDo) FindByPage(offset int, limit int) (result []*model.ComandasItemGrade, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c comandasItemGradeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c comandasItemGradeDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c comandasItemGradeDo) Delete(models ...*model.ComandasItemGrade) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *comandasItemGradeDo) withDO(do gen.Dao) *comandasItemGradeDo {
	c.DO = *do.(*gen.DO)
	return c
}
