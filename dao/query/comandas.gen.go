// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/kartmatias/cdwk-pos-agent/dao/model"
)

func newComanda(db *gorm.DB, opts ...gen.DOOption) comanda {
	_comanda := comanda{}

	_comanda.comandaDo.UseDB(db, opts...)
	_comanda.comandaDo.UseModel(&model.Comanda{})

	tableName := _comanda.comandaDo.TableName()
	_comanda.ALL = field.NewAsterisk(tableName)
	_comanda.Comanda = field.NewInt64(tableName, "Comanda")
	_comanda.Data = field.NewTime(tableName, "Data")
	_comanda.Cliente = field.NewInt64(tableName, "Cliente")
	_comanda.Consumidor = field.NewString(tableName, "Consumidor")
	_comanda.Vendedor = field.NewInt64(tableName, "Vendedor")
	_comanda.ValorBruto = field.NewField(tableName, "ValorBruto")
	_comanda.ValorDesconto = field.NewField(tableName, "ValorDesconto")
	_comanda.Abono = field.NewField(tableName, "Abono")
	_comanda.CodCondPagto = field.NewInt64(tableName, "CodCondPagto")
	_comanda.CondPagto = field.NewString(tableName, "CondPagto")
	_comanda.FormaPagto = field.NewString(tableName, "FormaPagto")
	_comanda.CodFormaPagto = field.NewInt64(tableName, "CodFormaPagto")
	_comanda.Corretor = field.NewInt64(tableName, "Corretor")
	_comanda.Loja = field.NewInt64(tableName, "Loja")
	_comanda.TaxaEntrega = field.NewField(tableName, "TaxaEntrega")
	_comanda.AVista = field.NewField(tableName, "AVista")
	_comanda.APrazo = field.NewField(tableName, "APrazo")
	_comanda.Tabela = field.NewInt64(tableName, "Tabela")
	_comanda.TipoVenda = field.NewString(tableName, "TipoVenda")
	_comanda.Pedido = field.NewInt64(tableName, "Pedido")
	_comanda.Funcionario = field.NewBool(tableName, "Funcionario")
	_comanda.Varejo = field.NewBool(tableName, "Varejo")
	_comanda.Comercial = field.NewBool(tableName, "Comercial")
	_comanda.PercentualBonificacao = field.NewFloat64(tableName, "PercentualBonificacao")
	_comanda.ValorBonificacao = field.NewField(tableName, "ValorBonificacao")
	_comanda.EnviadoparaoRepresentante = field.NewBool(tableName, "EnviadoparaoRepresentante")
	_comanda.NotaFiscal = field.NewInt64(tableName, "NotaFiscal")
	_comanda.Justificativa = field.NewString(tableName, "Justificativa")
	_comanda.CupomFiscal = field.NewInt64(tableName, "CupomFiscal")
	_comanda.Suframa = field.NewBool(tableName, "Suframa")
	_comanda.NumerodoCaixa = field.NewInt64(tableName, "NumerodoCaixa")
	_comanda.MotivodaDoacao = field.NewString(tableName, "MotivodaDoacao")
	_comanda.ControledeSeparacao = field.NewInt64(tableName, "ControledeSeparacao")
	_comanda.ComissaodoVendedor = field.NewFloat64(tableName, "ComissaodoVendedor")
	_comanda.NotaFiscalSerie = field.NewString(tableName, "NotaFiscal_Serie")
	_comanda.NotaFiscalLoja = field.NewInt64(tableName, "NotaFiscal_Loja")
	_comanda.NotaFiscalModelo = field.NewInt64(tableName, "NotaFiscal_Modelo")
	_comanda.CodBalconista = field.NewInt64(tableName, "CodBalconista")
	_comanda.Acrescimo = field.NewField(tableName, "acrescimo")
	_comanda.Arredondamento = field.NewField(tableName, "arredondamento")
	_comanda.Hora = field.NewInt64(tableName, "hora")
	_comanda.CNPJCPFConsumidor = field.NewString(tableName, "CNPJCPFConsumidor")
	_comanda.PremiouCorretor = field.NewBool(tableName, "PremiouCorretor")
	_comanda.LancouComissao = field.NewBool(tableName, "LancouComissao")
	_comanda.CodigoTransportadora = field.NewInt64(tableName, "CodigoTransportadora")
	_comanda.ValorTotalDinheiro = field.NewField(tableName, "ValorTotalDinheiro")
	_comanda.ValorDescontoDinheiro = field.NewField(tableName, "ValorDescontoDinheiro")
	_comanda.ValorTotalCartao = field.NewField(tableName, "ValorTotalCartao")
	_comanda.ValorDescontoCartao = field.NewField(tableName, "ValorDescontoCartao")
	_comanda.PrecodoKG = field.NewField(tableName, "PrecodoKG")
	_comanda.ConciliacaoBancaria = field.NewInt64(tableName, "ConciliacaoBancaria")
	_comanda.CanalVenda = field.NewInt64(tableName, "CanalVenda")
	_comanda.Entrega = field.NewString(tableName, "Entrega")
	_comanda.Observacao = field.NewString(tableName, "Observacao")

	_comanda.fillFieldMap()

	return _comanda
}

type comanda struct {
	comandaDo comandaDo

	ALL                       field.Asterisk
	Comanda                   field.Int64
	Data                      field.Time
	Cliente                   field.Int64
	Consumidor                field.String
	Vendedor                  field.Int64
	ValorBruto                field.Field
	ValorDesconto             field.Field
	Abono                     field.Field
	CodCondPagto              field.Int64
	CondPagto                 field.String
	FormaPagto                field.String
	CodFormaPagto             field.Int64
	Corretor                  field.Int64
	Loja                      field.Int64
	TaxaEntrega               field.Field
	AVista                    field.Field
	APrazo                    field.Field
	Tabela                    field.Int64
	TipoVenda                 field.String
	Pedido                    field.Int64
	Funcionario               field.Bool
	Varejo                    field.Bool
	Comercial                 field.Bool
	PercentualBonificacao     field.Float64
	ValorBonificacao          field.Field
	EnviadoparaoRepresentante field.Bool
	NotaFiscal                field.Int64
	Justificativa             field.String
	CupomFiscal               field.Int64
	Suframa                   field.Bool
	NumerodoCaixa             field.Int64
	MotivodaDoacao            field.String
	ControledeSeparacao       field.Int64
	ComissaodoVendedor        field.Float64
	NotaFiscalSerie           field.String
	NotaFiscalLoja            field.Int64
	NotaFiscalModelo          field.Int64
	CodBalconista             field.Int64
	Acrescimo                 field.Field
	Arredondamento            field.Field
	Hora                      field.Int64
	CNPJCPFConsumidor         field.String
	PremiouCorretor           field.Bool
	LancouComissao            field.Bool
	CodigoTransportadora      field.Int64
	ValorTotalDinheiro        field.Field
	ValorDescontoDinheiro     field.Field
	ValorTotalCartao          field.Field
	ValorDescontoCartao       field.Field
	PrecodoKG                 field.Field
	ConciliacaoBancaria       field.Int64
	CanalVenda                field.Int64
	Entrega                   field.String
	Observacao                field.String

	fieldMap map[string]field.Expr
}

func (c comanda) Table(newTableName string) *comanda {
	c.comandaDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c comanda) As(alias string) *comanda {
	c.comandaDo.DO = *(c.comandaDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *comanda) updateTableName(table string) *comanda {
	c.ALL = field.NewAsterisk(table)
	c.Comanda = field.NewInt64(table, "Comanda")
	c.Data = field.NewTime(table, "Data")
	c.Cliente = field.NewInt64(table, "Cliente")
	c.Consumidor = field.NewString(table, "Consumidor")
	c.Vendedor = field.NewInt64(table, "Vendedor")
	c.ValorBruto = field.NewField(table, "ValorBruto")
	c.ValorDesconto = field.NewField(table, "ValorDesconto")
	c.Abono = field.NewField(table, "Abono")
	c.CodCondPagto = field.NewInt64(table, "CodCondPagto")
	c.CondPagto = field.NewString(table, "CondPagto")
	c.FormaPagto = field.NewString(table, "FormaPagto")
	c.CodFormaPagto = field.NewInt64(table, "CodFormaPagto")
	c.Corretor = field.NewInt64(table, "Corretor")
	c.Loja = field.NewInt64(table, "Loja")
	c.TaxaEntrega = field.NewField(table, "TaxaEntrega")
	c.AVista = field.NewField(table, "AVista")
	c.APrazo = field.NewField(table, "APrazo")
	c.Tabela = field.NewInt64(table, "Tabela")
	c.TipoVenda = field.NewString(table, "TipoVenda")
	c.Pedido = field.NewInt64(table, "Pedido")
	c.Funcionario = field.NewBool(table, "Funcionario")
	c.Varejo = field.NewBool(table, "Varejo")
	c.Comercial = field.NewBool(table, "Comercial")
	c.PercentualBonificacao = field.NewFloat64(table, "PercentualBonificacao")
	c.ValorBonificacao = field.NewField(table, "ValorBonificacao")
	c.EnviadoparaoRepresentante = field.NewBool(table, "EnviadoparaoRepresentante")
	c.NotaFiscal = field.NewInt64(table, "NotaFiscal")
	c.Justificativa = field.NewString(table, "Justificativa")
	c.CupomFiscal = field.NewInt64(table, "CupomFiscal")
	c.Suframa = field.NewBool(table, "Suframa")
	c.NumerodoCaixa = field.NewInt64(table, "NumerodoCaixa")
	c.MotivodaDoacao = field.NewString(table, "MotivodaDoacao")
	c.ControledeSeparacao = field.NewInt64(table, "ControledeSeparacao")
	c.ComissaodoVendedor = field.NewFloat64(table, "ComissaodoVendedor")
	c.NotaFiscalSerie = field.NewString(table, "NotaFiscal_Serie")
	c.NotaFiscalLoja = field.NewInt64(table, "NotaFiscal_Loja")
	c.NotaFiscalModelo = field.NewInt64(table, "NotaFiscal_Modelo")
	c.CodBalconista = field.NewInt64(table, "CodBalconista")
	c.Acrescimo = field.NewField(table, "acrescimo")
	c.Arredondamento = field.NewField(table, "arredondamento")
	c.Hora = field.NewInt64(table, "hora")
	c.CNPJCPFConsumidor = field.NewString(table, "CNPJCPFConsumidor")
	c.PremiouCorretor = field.NewBool(table, "PremiouCorretor")
	c.LancouComissao = field.NewBool(table, "LancouComissao")
	c.CodigoTransportadora = field.NewInt64(table, "CodigoTransportadora")
	c.ValorTotalDinheiro = field.NewField(table, "ValorTotalDinheiro")
	c.ValorDescontoDinheiro = field.NewField(table, "ValorDescontoDinheiro")
	c.ValorTotalCartao = field.NewField(table, "ValorTotalCartao")
	c.ValorDescontoCartao = field.NewField(table, "ValorDescontoCartao")
	c.PrecodoKG = field.NewField(table, "PrecodoKG")
	c.ConciliacaoBancaria = field.NewInt64(table, "ConciliacaoBancaria")
	c.CanalVenda = field.NewInt64(table, "CanalVenda")
	c.Entrega = field.NewString(table, "Entrega")
	c.Observacao = field.NewString(table, "Observacao")

	c.fillFieldMap()

	return c
}

func (c *comanda) WithContext(ctx context.Context) *comandaDo { return c.comandaDo.WithContext(ctx) }

func (c comanda) TableName() string { return c.comandaDo.TableName() }

func (c comanda) Alias() string { return c.comandaDo.Alias() }

func (c comanda) Columns(cols ...field.Expr) gen.Columns { return c.comandaDo.Columns(cols...) }

func (c *comanda) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *comanda) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 54)
	c.fieldMap["Comanda"] = c.Comanda
	c.fieldMap["Data"] = c.Data
	c.fieldMap["Cliente"] = c.Cliente
	c.fieldMap["Consumidor"] = c.Consumidor
	c.fieldMap["Vendedor"] = c.Vendedor
	c.fieldMap["ValorBruto"] = c.ValorBruto
	c.fieldMap["ValorDesconto"] = c.ValorDesconto
	c.fieldMap["Abono"] = c.Abono
	c.fieldMap["CodCondPagto"] = c.CodCondPagto
	c.fieldMap["CondPagto"] = c.CondPagto
	c.fieldMap["FormaPagto"] = c.FormaPagto
	c.fieldMap["CodFormaPagto"] = c.CodFormaPagto
	c.fieldMap["Corretor"] = c.Corretor
	c.fieldMap["Loja"] = c.Loja
	c.fieldMap["TaxaEntrega"] = c.TaxaEntrega
	c.fieldMap["AVista"] = c.AVista
	c.fieldMap["APrazo"] = c.APrazo
	c.fieldMap["Tabela"] = c.Tabela
	c.fieldMap["TipoVenda"] = c.TipoVenda
	c.fieldMap["Pedido"] = c.Pedido
	c.fieldMap["Funcionario"] = c.Funcionario
	c.fieldMap["Varejo"] = c.Varejo
	c.fieldMap["Comercial"] = c.Comercial
	c.fieldMap["PercentualBonificacao"] = c.PercentualBonificacao
	c.fieldMap["ValorBonificacao"] = c.ValorBonificacao
	c.fieldMap["EnviadoparaoRepresentante"] = c.EnviadoparaoRepresentante
	c.fieldMap["NotaFiscal"] = c.NotaFiscal
	c.fieldMap["Justificativa"] = c.Justificativa
	c.fieldMap["CupomFiscal"] = c.CupomFiscal
	c.fieldMap["Suframa"] = c.Suframa
	c.fieldMap["NumerodoCaixa"] = c.NumerodoCaixa
	c.fieldMap["MotivodaDoacao"] = c.MotivodaDoacao
	c.fieldMap["ControledeSeparacao"] = c.ControledeSeparacao
	c.fieldMap["ComissaodoVendedor"] = c.ComissaodoVendedor
	c.fieldMap["NotaFiscal_Serie"] = c.NotaFiscalSerie
	c.fieldMap["NotaFiscal_Loja"] = c.NotaFiscalLoja
	c.fieldMap["NotaFiscal_Modelo"] = c.NotaFiscalModelo
	c.fieldMap["CodBalconista"] = c.CodBalconista
	c.fieldMap["acrescimo"] = c.Acrescimo
	c.fieldMap["arredondamento"] = c.Arredondamento
	c.fieldMap["hora"] = c.Hora
	c.fieldMap["CNPJCPFConsumidor"] = c.CNPJCPFConsumidor
	c.fieldMap["PremiouCorretor"] = c.PremiouCorretor
	c.fieldMap["LancouComissao"] = c.LancouComissao
	c.fieldMap["CodigoTransportadora"] = c.CodigoTransportadora
	c.fieldMap["ValorTotalDinheiro"] = c.ValorTotalDinheiro
	c.fieldMap["ValorDescontoDinheiro"] = c.ValorDescontoDinheiro
	c.fieldMap["ValorTotalCartao"] = c.ValorTotalCartao
	c.fieldMap["ValorDescontoCartao"] = c.ValorDescontoCartao
	c.fieldMap["PrecodoKG"] = c.PrecodoKG
	c.fieldMap["ConciliacaoBancaria"] = c.ConciliacaoBancaria
	c.fieldMap["CanalVenda"] = c.CanalVenda
	c.fieldMap["Entrega"] = c.Entrega
	c.fieldMap["Observacao"] = c.Observacao
}

func (c comanda) clone(db *gorm.DB) comanda {
	c.comandaDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c comanda) replaceDB(db *gorm.DB) comanda {
	c.comandaDo.ReplaceDB(db)
	return c
}

type comandaDo struct{ gen.DO }

func (c comandaDo) Debug() *comandaDo {
	return c.withDO(c.DO.Debug())
}

func (c comandaDo) WithContext(ctx context.Context) *comandaDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c comandaDo) ReadDB() *comandaDo {
	return c.Clauses(dbresolver.Read)
}

func (c comandaDo) WriteDB() *comandaDo {
	return c.Clauses(dbresolver.Write)
}

func (c comandaDo) Session(config *gorm.Session) *comandaDo {
	return c.withDO(c.DO.Session(config))
}

func (c comandaDo) Clauses(conds ...clause.Expression) *comandaDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c comandaDo) Returning(value interface{}, columns ...string) *comandaDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c comandaDo) Not(conds ...gen.Condition) *comandaDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c comandaDo) Or(conds ...gen.Condition) *comandaDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c comandaDo) Select(conds ...field.Expr) *comandaDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c comandaDo) Where(conds ...gen.Condition) *comandaDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c comandaDo) Order(conds ...field.Expr) *comandaDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c comandaDo) Distinct(cols ...field.Expr) *comandaDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c comandaDo) Omit(cols ...field.Expr) *comandaDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c comandaDo) Join(table schema.Tabler, on ...field.Expr) *comandaDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c comandaDo) LeftJoin(table schema.Tabler, on ...field.Expr) *comandaDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c comandaDo) RightJoin(table schema.Tabler, on ...field.Expr) *comandaDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c comandaDo) Group(cols ...field.Expr) *comandaDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c comandaDo) Having(conds ...gen.Condition) *comandaDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c comandaDo) Limit(limit int) *comandaDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c comandaDo) Offset(offset int) *comandaDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c comandaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *comandaDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c comandaDo) Unscoped() *comandaDo {
	return c.withDO(c.DO.Unscoped())
}

func (c comandaDo) Create(values ...*model.Comanda) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c comandaDo) CreateInBatches(values []*model.Comanda, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c comandaDo) Save(values ...*model.Comanda) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c comandaDo) First() (*model.Comanda, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Comanda), nil
	}
}

func (c comandaDo) Take() (*model.Comanda, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Comanda), nil
	}
}

func (c comandaDo) Last() (*model.Comanda, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Comanda), nil
	}
}

func (c comandaDo) Find() ([]*model.Comanda, error) {
	result, err := c.DO.Find()
	return result.([]*model.Comanda), err
}

func (c comandaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Comanda, err error) {
	buf := make([]*model.Comanda, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c comandaDo) FindInBatches(result *[]*model.Comanda, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c comandaDo) Attrs(attrs ...field.AssignExpr) *comandaDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c comandaDo) Assign(attrs ...field.AssignExpr) *comandaDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c comandaDo) Joins(fields ...field.RelationField) *comandaDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c comandaDo) Preload(fields ...field.RelationField) *comandaDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c comandaDo) FirstOrInit() (*model.Comanda, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Comanda), nil
	}
}

func (c comandaDo) FirstOrCreate() (*model.Comanda, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Comanda), nil
	}
}

func (c comandaDo) FindByPage(offset int, limit int) (result []*model.Comanda, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c comandaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c comandaDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c comandaDo) Delete(models ...*model.Comanda) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *comandaDo) withDO(do gen.Dao) *comandaDo {
	c.DO = *do.(*gen.DO)
	return c
}
