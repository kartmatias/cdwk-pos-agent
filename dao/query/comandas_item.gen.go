// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/kartmatias/cdwk-pos-agent/dao/model"
)

func newComandasItem(db *gorm.DB, opts ...gen.DOOption) comandasItem {
	_comandasItem := comandasItem{}

	_comandasItem.comandasItemDo.UseDB(db, opts...)
	_comandasItem.comandasItemDo.UseModel(&model.ComandasItem{})

	tableName := _comandasItem.comandasItemDo.TableName()
	_comandasItem.ALL = field.NewAsterisk(tableName)
	_comandasItem.Comanda = field.NewInt64(tableName, "Comanda")
	_comandasItem.Produto = field.NewString(tableName, "Produto")
	_comandasItem.Item = field.NewInt64(tableName, "Item")
	_comandasItem.Qtde = field.NewInt64(tableName, "Qtde")
	_comandasItem.Unitario = field.NewField(tableName, "Unitario")
	_comandasItem.Total = field.NewField(tableName, "Total")
	_comandasItem.Promocao = field.NewInt64(tableName, "Promocao")
	_comandasItem.Cor = field.NewInt64(tableName, "Cor")
	_comandasItem.Tam = field.NewString(tableName, "Tam")
	_comandasItem.Posicao = field.NewInt64(tableName, "Posicao")
	_comandasItem.PecacomLD = field.NewInt64(tableName, "PecacomLD")
	_comandasItem.SituacaoTributariaECF = field.NewString(tableName, "SituacaoTributariaECF")
	_comandasItem.ValorDescontoProduto = field.NewField(tableName, "ValorDescontoProduto")
	_comandasItem.Unidade = field.NewString(tableName, "Unidade")
	_comandasItem.CFOP = field.NewInt64(tableName, "CFOP")
	_comandasItem.CstICMS = field.NewString(tableName, "CstICMS")
	_comandasItem.AliquotaICMS = field.NewFloat64(tableName, "AliquotaICMS")
	_comandasItem.CstPis = field.NewString(tableName, "CstPis")
	_comandasItem.AliquotaPis = field.NewFloat64(tableName, "AliquotaPis")
	_comandasItem.CstCofins = field.NewString(tableName, "CstCofins")
	_comandasItem.AliquotaCofins = field.NewFloat64(tableName, "AliquotaCofins")

	_comandasItem.fillFieldMap()

	return _comandasItem
}

type comandasItem struct {
	comandasItemDo comandasItemDo

	ALL                   field.Asterisk
	Comanda               field.Int64
	Produto               field.String
	Item                  field.Int64
	Qtde                  field.Int64
	Unitario              field.Field
	Total                 field.Field
	Promocao              field.Int64
	Cor                   field.Int64
	Tam                   field.String
	Posicao               field.Int64
	PecacomLD             field.Int64
	SituacaoTributariaECF field.String
	ValorDescontoProduto  field.Field
	Unidade               field.String
	CFOP                  field.Int64
	CstICMS               field.String
	AliquotaICMS          field.Float64
	CstPis                field.String
	AliquotaPis           field.Float64
	CstCofins             field.String
	AliquotaCofins        field.Float64

	fieldMap map[string]field.Expr
}

func (c comandasItem) Table(newTableName string) *comandasItem {
	c.comandasItemDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c comandasItem) As(alias string) *comandasItem {
	c.comandasItemDo.DO = *(c.comandasItemDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *comandasItem) updateTableName(table string) *comandasItem {
	c.ALL = field.NewAsterisk(table)
	c.Comanda = field.NewInt64(table, "Comanda")
	c.Produto = field.NewString(table, "Produto")
	c.Item = field.NewInt64(table, "Item")
	c.Qtde = field.NewInt64(table, "Qtde")
	c.Unitario = field.NewField(table, "Unitario")
	c.Total = field.NewField(table, "Total")
	c.Promocao = field.NewInt64(table, "Promocao")
	c.Cor = field.NewInt64(table, "Cor")
	c.Tam = field.NewString(table, "Tam")
	c.Posicao = field.NewInt64(table, "Posicao")
	c.PecacomLD = field.NewInt64(table, "PecacomLD")
	c.SituacaoTributariaECF = field.NewString(table, "SituacaoTributariaECF")
	c.ValorDescontoProduto = field.NewField(table, "ValorDescontoProduto")
	c.Unidade = field.NewString(table, "Unidade")
	c.CFOP = field.NewInt64(table, "CFOP")
	c.CstICMS = field.NewString(table, "CstICMS")
	c.AliquotaICMS = field.NewFloat64(table, "AliquotaICMS")
	c.CstPis = field.NewString(table, "CstPis")
	c.AliquotaPis = field.NewFloat64(table, "AliquotaPis")
	c.CstCofins = field.NewString(table, "CstCofins")
	c.AliquotaCofins = field.NewFloat64(table, "AliquotaCofins")

	c.fillFieldMap()

	return c
}

func (c *comandasItem) WithContext(ctx context.Context) *comandasItemDo {
	return c.comandasItemDo.WithContext(ctx)
}

func (c comandasItem) TableName() string { return c.comandasItemDo.TableName() }

func (c comandasItem) Alias() string { return c.comandasItemDo.Alias() }

func (c comandasItem) Columns(cols ...field.Expr) gen.Columns {
	return c.comandasItemDo.Columns(cols...)
}

func (c *comandasItem) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *comandasItem) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 21)
	c.fieldMap["Comanda"] = c.Comanda
	c.fieldMap["Produto"] = c.Produto
	c.fieldMap["Item"] = c.Item
	c.fieldMap["Qtde"] = c.Qtde
	c.fieldMap["Unitario"] = c.Unitario
	c.fieldMap["Total"] = c.Total
	c.fieldMap["Promocao"] = c.Promocao
	c.fieldMap["Cor"] = c.Cor
	c.fieldMap["Tam"] = c.Tam
	c.fieldMap["Posicao"] = c.Posicao
	c.fieldMap["PecacomLD"] = c.PecacomLD
	c.fieldMap["SituacaoTributariaECF"] = c.SituacaoTributariaECF
	c.fieldMap["ValorDescontoProduto"] = c.ValorDescontoProduto
	c.fieldMap["Unidade"] = c.Unidade
	c.fieldMap["CFOP"] = c.CFOP
	c.fieldMap["CstICMS"] = c.CstICMS
	c.fieldMap["AliquotaICMS"] = c.AliquotaICMS
	c.fieldMap["CstPis"] = c.CstPis
	c.fieldMap["AliquotaPis"] = c.AliquotaPis
	c.fieldMap["CstCofins"] = c.CstCofins
	c.fieldMap["AliquotaCofins"] = c.AliquotaCofins
}

func (c comandasItem) clone(db *gorm.DB) comandasItem {
	c.comandasItemDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c comandasItem) replaceDB(db *gorm.DB) comandasItem {
	c.comandasItemDo.ReplaceDB(db)
	return c
}

type comandasItemDo struct{ gen.DO }

func (c comandasItemDo) Debug() *comandasItemDo {
	return c.withDO(c.DO.Debug())
}

func (c comandasItemDo) WithContext(ctx context.Context) *comandasItemDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c comandasItemDo) ReadDB() *comandasItemDo {
	return c.Clauses(dbresolver.Read)
}

func (c comandasItemDo) WriteDB() *comandasItemDo {
	return c.Clauses(dbresolver.Write)
}

func (c comandasItemDo) Session(config *gorm.Session) *comandasItemDo {
	return c.withDO(c.DO.Session(config))
}

func (c comandasItemDo) Clauses(conds ...clause.Expression) *comandasItemDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c comandasItemDo) Returning(value interface{}, columns ...string) *comandasItemDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c comandasItemDo) Not(conds ...gen.Condition) *comandasItemDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c comandasItemDo) Or(conds ...gen.Condition) *comandasItemDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c comandasItemDo) Select(conds ...field.Expr) *comandasItemDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c comandasItemDo) Where(conds ...gen.Condition) *comandasItemDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c comandasItemDo) Order(conds ...field.Expr) *comandasItemDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c comandasItemDo) Distinct(cols ...field.Expr) *comandasItemDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c comandasItemDo) Omit(cols ...field.Expr) *comandasItemDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c comandasItemDo) Join(table schema.Tabler, on ...field.Expr) *comandasItemDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c comandasItemDo) LeftJoin(table schema.Tabler, on ...field.Expr) *comandasItemDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c comandasItemDo) RightJoin(table schema.Tabler, on ...field.Expr) *comandasItemDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c comandasItemDo) Group(cols ...field.Expr) *comandasItemDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c comandasItemDo) Having(conds ...gen.Condition) *comandasItemDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c comandasItemDo) Limit(limit int) *comandasItemDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c comandasItemDo) Offset(offset int) *comandasItemDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c comandasItemDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *comandasItemDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c comandasItemDo) Unscoped() *comandasItemDo {
	return c.withDO(c.DO.Unscoped())
}

func (c comandasItemDo) Create(values ...*model.ComandasItem) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c comandasItemDo) CreateInBatches(values []*model.ComandasItem, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c comandasItemDo) Save(values ...*model.ComandasItem) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c comandasItemDo) First() (*model.ComandasItem, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComandasItem), nil
	}
}

func (c comandasItemDo) Take() (*model.ComandasItem, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComandasItem), nil
	}
}

func (c comandasItemDo) Last() (*model.ComandasItem, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComandasItem), nil
	}
}

func (c comandasItemDo) Find() ([]*model.ComandasItem, error) {
	result, err := c.DO.Find()
	return result.([]*model.ComandasItem), err
}

func (c comandasItemDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ComandasItem, err error) {
	buf := make([]*model.ComandasItem, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c comandasItemDo) FindInBatches(result *[]*model.ComandasItem, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c comandasItemDo) Attrs(attrs ...field.AssignExpr) *comandasItemDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c comandasItemDo) Assign(attrs ...field.AssignExpr) *comandasItemDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c comandasItemDo) Joins(fields ...field.RelationField) *comandasItemDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c comandasItemDo) Preload(fields ...field.RelationField) *comandasItemDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c comandasItemDo) FirstOrInit() (*model.ComandasItem, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComandasItem), nil
	}
}

func (c comandasItemDo) FirstOrCreate() (*model.ComandasItem, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ComandasItem), nil
	}
}

func (c comandasItemDo) FindByPage(offset int, limit int) (result []*model.ComandasItem, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c comandasItemDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c comandasItemDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c comandasItemDo) Delete(models ...*model.ComandasItem) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *comandasItemDo) withDO(do gen.Dao) *comandasItemDo {
	c.DO = *do.(*gen.DO)
	return c
}
